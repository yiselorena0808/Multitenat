declare const validations: {
    distinct: import("../types.js").SyncValidation<{
        field: string;
    }>;
    after: import("../types.js").SyncValidation<import("./date/helpers/offset.js").CompileReturnType>;
    afterOrEqual: import("../types.js").SyncValidation<import("./date/helpers/offset.js").CompileReturnType>;
    afterField: import("../types.js").SyncValidation<import("./date/helpers/field.js").CompileReturnType>;
    afterOrEqualToField: import("../types.js").SyncValidation<import("./date/helpers/field.js").CompileReturnType>;
    before: import("../types.js").SyncValidation<import("./date/helpers/offset.js").CompileReturnType>;
    beforeOrEqual: import("../types.js").SyncValidation<import("./date/helpers/offset.js").CompileReturnType>;
    beforeField: import("../types.js").SyncValidation<import("./date/helpers/field.js").CompileReturnType>;
    beforeOrEqualToField: import("../types.js").SyncValidation<import("./date/helpers/field.js").CompileReturnType>;
    bigint: import("../types.js").SyncValidation;
    confirmed: import("../types.js").SyncValidation;
    required: import("../types.js").SyncValidation;
    nullable: import("../types.js").SyncValidation;
    requiredIfExists: import("../types.js").SyncValidation<{
        field: string;
    }>;
    requiredIfExistsAll: import("../types.js").SyncValidation<{
        fields: string[];
    }>;
    requiredIfExistsAny: import("../types.js").SyncValidation<{
        fields: string[];
    }>;
    requiredIfNotExists: import("../types.js").SyncValidation<{
        field: string;
    }>;
    requiredIfNotExistsAll: import("../types.js").SyncValidation<{
        fields: string[];
    }>;
    requiredIfNotExistsAny: import("../types.js").SyncValidation<{
        fields: string[];
    }>;
    requiredWhen: import("../types.js").SyncValidation<{
        operator: "in" | "notIn" | ">" | "<" | ">=" | "<=" | "=" | "!=";
        field: string;
        comparisonValues?: any;
        ref?: string | undefined;
    }>;
    notIn: import("../types.js").SyncValidation<{
        values?: (string | number)[] | undefined;
        ref?: string | undefined;
        subtype: "string" | "number" | "array" | "date";
    }>;
    unsigned: import("../types.js").SyncValidation;
    range: import("../types.js").SyncValidation<{
        start: number;
        stop: number;
    }>;
    array: import("../types.js").SyncValidation;
    boolean: import("../types.js").SyncValidation;
    date: import("../types.js").SyncValidation<{
        format?: string | undefined;
    }>;
    enum: import("../types.js").SyncValidation<{
        choices?: any[] | undefined;
        ref?: string | undefined;
    }>;
    enumSet: import("../types.js").SyncValidation<{
        choices?: any[] | undefined;
        ref?: string | undefined;
    }>;
    file: import("../types.js").SyncValidation<Partial<import("@adonisjs/bodyparser/types").FileValidationOptions>>;
    number: import("../types.js").SyncValidation;
    object: import("../types.js").SyncValidation;
    string: import("../types.js").SyncValidation<{
        escape: boolean;
        trim: boolean;
    }>;
    alpha: import("../types.js").SyncValidation<{
        pattern: string;
    }>;
    alphaNum: import("../types.js").SyncValidation<{
        pattern: string;
    }>;
    regex: import("../types.js").SyncValidation<{
        pattern: string;
        flags: string;
    }>;
    escape: import("../types.js").SyncValidation<undefined>;
    trim: import("../types.js").SyncValidation<undefined>;
    email: import("../types.js").SyncValidation<import("validator/lib/isEmail.js").IsEmailOptions & {
        sanitize?: import("validator").NormalizeEmailOptions | undefined;
    }>;
    normalizeEmail: import("../types.js").SyncValidation<import("validator").NormalizeEmailOptions>;
    url: import("../types.js").SyncValidation<{
        sanitizationOptions: {
            normalizeProtocol?: boolean | undefined;
            stripWWW?: boolean | undefined;
        };
        validationOptions: import("validator/lib/isURL.js").IsURLOptions;
    }>;
    normalizeUrl: import("../types.js").SyncValidation<import("../types.js").UrlNormalizationOptions>;
    ip: import("../types.js").SyncValidation<{
        version?: 4 | 6 | undefined;
    }>;
    uuid: import("../types.js").SyncValidation<{
        version?: import("validator").UUIDVersion | undefined;
    }>;
    mobile: import("../types.js").SyncValidation<{
        strict: boolean;
        locale?: import("validator").MobilePhoneLocale[] | undefined;
    }>;
    maxLength: import("../types.js").SyncValidation<{
        maxLength: number;
        subtype: import("../types.js").NodeSubType;
    }>;
    minLength: import("../types.js").SyncValidation<{
        minLength: number;
        subtype: import("../types.js").NodeSubType;
    }>;
    equalTo: import("../types.js").SyncValidation<{
        fieldValue?: string | undefined;
        ref?: string | undefined;
    }>;
};
export default validations;
