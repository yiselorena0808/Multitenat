import { SyncValidation } from '../../types.js';
/**
 * Return value of the compile function
 */
type CompileReturnType = {
    operator: keyof typeof OPERATORS;
    field: string;
    comparisonValues?: any | any[];
    ref?: string;
};
/**
 * Available operators
 */
declare const OPERATORS: {
    /**
     * Handles the "in" operator. Also ensures, the comparison values are an
     * array or a ref.
     */
    in: {
        validate(comparisonValues: any): void;
        passes: (value: any, comparisonValues: any[]) => boolean;
    };
    /**
     * Handles the "notIn" operator. Also ensures, the comparison values are an
     * array or a ref.
     */
    notIn: {
        validate(comparisonValues: any[]): void;
        passes: (value: any, comparisonValues: any[]) => boolean;
    };
    /**
     * Handles the "=" operator. No validate time checks are required here
     */
    '=': {
        passes: (value: any, comparisonValue: any) => boolean;
    };
    /**
     * Handles the "!=" operator. No validate time checks are required here
     */
    '!=': {
        passes: (value: any, comparisonValue: any) => boolean;
    };
    /**
     * Handles the ">" operator. Ensures `comparisonValue` is a number
     * or a ref
     */
    '>': {
        validate(comparisonValue: number): void;
        passes: (value: number, comparisonValue: number) => boolean;
    };
    /**
     * Handles the "<" operator. Ensures `comparisonValue` is a number
     * or a ref
     */
    '<': {
        validate(comparisonValue: number): void;
        passes: (value: number, comparisonValue: number) => boolean;
    };
    /**
     * Handles the ">=" operator. Ensures `comparisonValue` is a number
     * or a ref
     */
    '>=': {
        validate(comparisonValue: number): void;
        passes: (value: number, comparisonValue: number) => boolean;
    };
    /**
     * Handles the "<=" operator. Ensures `comparisonValue` is a number
     * or a ref
     */
    '<=': {
        validate(comparisonValue: number): void;
        passes: (value: number, comparisonValue: number) => boolean;
    };
};
/**
 * Ensure the value exists when defined expectation passed.
 * `null`, `undefined` and `empty string` fails the validation.
 */
export declare const requiredWhen: SyncValidation<CompileReturnType>;
export {};
